{"ast":null,"code":"\"use strict\";\n\nimport _createClass from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { getAddress as _getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport { checkResultErrors };\nexport var LogDescription = /*#__PURE__*/function (_Description) {\n  _inherits(LogDescription, _Description);\n\n  var _super = _createSuper(LogDescription);\n\n  function LogDescription() {\n    _classCallCheck(this, LogDescription);\n\n    return _super.apply(this, arguments);\n  }\n\n  return _createClass(LogDescription);\n}(Description);\nexport var TransactionDescription = /*#__PURE__*/function (_Description2) {\n  _inherits(TransactionDescription, _Description2);\n\n  var _super2 = _createSuper(TransactionDescription);\n\n  function TransactionDescription() {\n    _classCallCheck(this, TransactionDescription);\n\n    return _super2.apply(this, arguments);\n  }\n\n  return _createClass(TransactionDescription);\n}(Description);\nexport var Indexed = /*#__PURE__*/function (_Description3) {\n  _inherits(Indexed, _Description3);\n\n  var _super3 = _createSuper(Indexed);\n\n  function Indexed() {\n    _classCallCheck(this, Indexed);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(Indexed, null, [{\n    key: \"isIndexed\",\n    value: function isIndexed(value) {\n      return !!(value && value._isIndexed);\n    }\n  }]);\n\n  return Indexed;\n}(Description);\n\nfunction wrapAccessError(property, error) {\n  var wrap = new Error(\"deferred error during ABI decoding triggered accessing \".concat(property));\n  wrap.error = error;\n  return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n\nexport var Interface = /*#__PURE__*/function () {\n  function Interface(fragments) {\n    var _this = this;\n\n    _classCallCheck(this, Interface);\n\n    logger.checkNew(this instanceof Interface ? this.constructor : void 0, Interface);\n    var abi = [];\n\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n\n    defineReadOnly(this, \"fragments\", abi.map(function (fragment) {\n      return Fragment.from(fragment);\n    }).filter(function (fragment) {\n      return fragment != null;\n    }));\n    defineReadOnly(this, \"_abiCoder\", getStatic(this instanceof Interface ? this.constructor : void 0, \"getAbiCoder\")());\n    defineReadOnly(this, \"functions\", {});\n    defineReadOnly(this, \"errors\", {});\n    defineReadOnly(this, \"events\", {});\n    defineReadOnly(this, \"structs\", {}); // Add all fragments by their signature\n\n    this.fragments.forEach(function (fragment) {\n      var bucket = null;\n\n      switch (fragment.type) {\n        case \"constructor\":\n          if (_this.deploy) {\n            logger.warn(\"duplicate definition - constructor\");\n            return;\n          } //checkNames(fragment, \"input\", fragment.inputs);\n\n\n          defineReadOnly(_this, \"deploy\", fragment);\n          return;\n\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = _this.functions;\n          break;\n\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = _this.events;\n          break;\n\n        default:\n          return;\n      }\n\n      var signature = fragment.format();\n\n      if (bucket[signature]) {\n        logger.warn(\"duplicate definition - \" + signature);\n        return;\n      }\n\n      bucket[signature] = fragment;\n    }); // If we do not have a constructor add a default\n\n    if (!this.deploy) {\n      defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n        payable: false,\n        type: \"constructor\"\n      }));\n    }\n\n    defineReadOnly(this, \"_isInterface\", true);\n  }\n\n  _createClass(Interface, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.full;\n      }\n\n      if (_format === FormatTypes.sighash) {\n        logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", _format);\n      }\n\n      var abi = this.fragments.map(function (fragment) {\n        return fragment.format(_format);\n      }); // We need to re-bundle the JSON fragments a bit\n\n      if (_format === FormatTypes.json) {\n        return JSON.stringify(abi.map(function (j) {\n          return JSON.parse(j);\n        }));\n      }\n\n      return abi;\n    } // Sub-classes can override these to handle other blockchains\n\n  }, {\n    key: \"getFunction\",\n    value: // Find a function definition by any means necessary (unless it is ambiguous)\n    function getFunction(nameOrSignatureOrSighash) {\n      if (isHexString(nameOrSignatureOrSighash)) {\n        for (var name in this.functions) {\n          if (nameOrSignatureOrSighash === this.getSighash(name)) {\n            return this.functions[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n        var _name = nameOrSignatureOrSighash.trim();\n\n        var matching = Object.keys(this.functions).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching function\", \"name\", _name);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching functions\", \"name\", _name);\n        }\n\n        return this.functions[matching[0]];\n      } // Normlize the signature and lookup the function\n\n\n      var result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n      }\n\n      return result;\n    } // Find an event definition by any means necessary (unless it is ambiguous)\n\n  }, {\n    key: \"getEvent\",\n    value: function getEvent(nameOrSignatureOrTopic) {\n      if (isHexString(nameOrSignatureOrTopic)) {\n        var topichash = nameOrSignatureOrTopic.toLowerCase();\n\n        for (var name in this.events) {\n          if (topichash === this.getEventTopic(name)) {\n            return this.events[name];\n          }\n        }\n\n        logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n      } // It is a bare name, look up the function (will return null if ambiguous)\n\n\n      if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n        var _name2 = nameOrSignatureOrTopic.trim();\n\n        var matching = Object.keys(this.events).filter(function (f) {\n          return f.split(\"(\"\n          /* fix:) */\n          )[0] === _name2;\n        });\n\n        if (matching.length === 0) {\n          logger.throwArgumentError(\"no matching event\", \"name\", _name2);\n        } else if (matching.length > 1) {\n          logger.throwArgumentError(\"multiple matching events\", \"name\", _name2);\n        }\n\n        return this.events[matching[0]];\n      } // Normlize the signature and lookup the function\n\n\n      var result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n\n      if (!result) {\n        logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n      }\n\n      return result;\n    } // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(functionFragment) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    } // Get the topic (the bytes32 hash) used by Solidity to identify an event\n\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n  }, {\n    key: \"_decodeParams\",\n    value: function _decodeParams(params, data) {\n      return this._abiCoder.decode(params, data);\n    }\n  }, {\n    key: \"_encodeParams\",\n    value: function _encodeParams(params, values) {\n      return this._abiCoder.encode(params, values);\n    }\n  }, {\n    key: \"encodeDeploy\",\n    value: function encodeDeploy(values) {\n      return this._encodeParams(this.deploy.inputs, values || []);\n    } // Decode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"decodeFunctionData\",\n    value: function decodeFunctionData(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n\n      if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n        logger.throwArgumentError(\"data signature does not match function \".concat(functionFragment.name, \".\"), \"data\", hexlify(bytes));\n      }\n\n      return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    } // Encode the data for a function call (e.g. tx.data)\n\n  }, {\n    key: \"encodeFunctionData\",\n    value: function encodeFunctionData(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(concat([this.getSighash(functionFragment), this._encodeParams(functionFragment.inputs, values || [])]));\n    } // Decode the result from a function call (e.g. from eth_call)\n\n  }, {\n    key: \"decodeFunctionResult\",\n    value: function decodeFunctionResult(functionFragment, data) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      var bytes = arrayify(data);\n      var reason = null;\n      var errorSignature = null;\n\n      switch (bytes.length % this._abiCoder._getWordSize()) {\n        case 0:\n          try {\n            return this._abiCoder.decode(functionFragment.outputs, bytes);\n          } catch (error) {}\n\n          break;\n\n        case 4:\n          if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n            errorSignature = \"Error(string)\";\n            reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n          }\n\n          break;\n      }\n\n      return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n        method: functionFragment.format(),\n        errorSignature: errorSignature,\n        errorArgs: [reason],\n        reason: reason\n      });\n    } // Encode the result for a function call (e.g. for eth_call)\n\n  }, {\n    key: \"encodeFunctionResult\",\n    value: function encodeFunctionResult(functionFragment, values) {\n      if (typeof functionFragment === \"string\") {\n        functionFragment = this.getFunction(functionFragment);\n      }\n\n      return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    } // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n\n  }, {\n    key: \"encodeFilterTopics\",\n    value: function encodeFilterTopics(eventFragment, values) {\n      var _this2 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (values.length > eventFragment.inputs.length) {\n        logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n          argument: \"values\",\n          value: values\n        });\n      }\n\n      var topics = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      var encodeTopic = function encodeTopic(param, value) {\n        if (param.type === \"string\") {\n          return id(value);\n        } else if (param.type === \"bytes\") {\n          return keccak256(hexlify(value));\n        } // Check addresses are valid\n\n\n        if (param.type === \"address\") {\n          _this2._abiCoder.encode([\"address\"], [value]);\n        }\n\n        return hexZeroPad(hexlify(value), 32);\n      };\n\n      values.forEach(function (value, index) {\n        var param = eventFragment.inputs[index];\n\n        if (!param.indexed) {\n          if (value != null) {\n            logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n          }\n\n          return;\n        }\n\n        if (value == null) {\n          topics.push(null);\n        } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n          logger.throwArgumentError(\"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n        } else if (Array.isArray(value)) {\n          topics.push(value.map(function (value) {\n            return encodeTopic(param, value);\n          }));\n        } else {\n          topics.push(encodeTopic(param, value));\n        }\n      }); // Trim off trailing nulls\n\n      while (topics.length && topics[topics.length - 1] === null) {\n        topics.pop();\n      }\n\n      return topics;\n    }\n  }, {\n    key: \"encodeEventLog\",\n    value: function encodeEventLog(eventFragment, values) {\n      var _this3 = this;\n\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      var topics = [];\n      var dataTypes = [];\n      var dataValues = [];\n\n      if (!eventFragment.anonymous) {\n        topics.push(this.getEventTopic(eventFragment));\n      }\n\n      if (values.length !== eventFragment.inputs.length) {\n        logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n      }\n\n      eventFragment.inputs.forEach(function (param, index) {\n        var value = values[index];\n\n        if (param.indexed) {\n          if (param.type === \"string\") {\n            topics.push(id(value));\n          } else if (param.type === \"bytes\") {\n            topics.push(keccak256(value));\n          } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n            // @TOOD\n            throw new Error(\"not implemented\");\n          } else {\n            topics.push(_this3._abiCoder.encode([param.type], [value]));\n          }\n        } else {\n          dataTypes.push(param);\n          dataValues.push(value);\n        }\n      });\n      return {\n        data: this._abiCoder.encode(dataTypes, dataValues),\n        topics: topics\n      };\n    } // Decode a filter for the event and the search criteria\n\n  }, {\n    key: \"decodeEventLog\",\n    value: function decodeEventLog(eventFragment, data, topics) {\n      if (typeof eventFragment === \"string\") {\n        eventFragment = this.getEvent(eventFragment);\n      }\n\n      if (topics != null && !eventFragment.anonymous) {\n        var topicHash = this.getEventTopic(eventFragment);\n\n        if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n          logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, {\n            argument: \"topics[0]\",\n            expected: topicHash,\n            value: topics[0]\n          });\n        }\n\n        topics = topics.slice(1);\n      }\n\n      var indexed = [];\n      var nonIndexed = [];\n      var dynamic = [];\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n            indexed.push(ParamType.fromObject({\n              type: \"bytes32\",\n              name: param.name\n            }));\n            dynamic.push(true);\n          } else {\n            indexed.push(param);\n            dynamic.push(false);\n          }\n        } else {\n          nonIndexed.push(param);\n          dynamic.push(false);\n        }\n      });\n      var resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat(topics)) : null;\n\n      var resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n\n      var result = [];\n      var nonIndexedIndex = 0,\n          indexedIndex = 0;\n      eventFragment.inputs.forEach(function (param, index) {\n        if (param.indexed) {\n          if (resultIndexed == null) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: null\n            });\n          } else if (dynamic[index]) {\n            result[index] = new Indexed({\n              _isIndexed: true,\n              hash: resultIndexed[indexedIndex++]\n            });\n          } else {\n            try {\n              result[index] = resultIndexed[indexedIndex++];\n            } catch (error) {\n              result[index] = error;\n            }\n          }\n        } else {\n          try {\n            result[index] = resultNonIndexed[nonIndexedIndex++];\n          } catch (error) {\n            result[index] = error;\n          }\n        } // Add the keyword argument if named and safe\n\n\n        if (param.name && result[param.name] == null) {\n          var value = result[index]; // Make error named values throw on access\n\n          if (value instanceof Error) {\n            Object.defineProperty(result, param.name, {\n              get: function get() {\n                throw wrapAccessError(\"property \".concat(JSON.stringify(param.name)), value);\n              }\n            });\n          } else {\n            result[param.name] = value;\n          }\n        }\n      }); // Make all error indexed values throw on access\n\n      var _loop = function _loop(i) {\n        var value = result[i];\n\n        if (value instanceof Error) {\n          Object.defineProperty(result, i, {\n            get: function get() {\n              throw wrapAccessError(\"index \".concat(i), value);\n            }\n          });\n        }\n      };\n\n      for (var i = 0; i < result.length; i++) {\n        _loop(i);\n      }\n\n      return Object.freeze(result);\n    } // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n\n  }, {\n    key: \"parseTransaction\",\n    value: function parseTransaction(tx) {\n      var fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n\n      if (!fragment) {\n        return null;\n      }\n\n      return new TransactionDescription({\n        args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n        functionFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        sighash: this.getSighash(fragment),\n        value: BigNumber.from(tx.value || \"0\")\n      });\n    } // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n\n  }, {\n    key: \"parseLog\",\n    value: function parseLog(log) {\n      var fragment = this.getEvent(log.topics[0]);\n\n      if (!fragment || fragment.anonymous) {\n        return null;\n      } // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n      //        Probably not, because just because it is the only event in the ABI does\n      //        not mean we have the full ABI; maybe jsut a fragment?\n\n\n      return new LogDescription({\n        eventFragment: fragment,\n        name: fragment.name,\n        signature: fragment.format(),\n        topic: this.getEventTopic(fragment),\n        args: this.decodeEventLog(fragment, log.data, log.topics)\n      });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n\n  }], [{\n    key: \"getAbiCoder\",\n    value: function getAbiCoder() {\n      return defaultAbiCoder;\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(address) {\n      return _getAddress(address);\n    }\n  }, {\n    key: \"getSighash\",\n    value: function getSighash(functionFragment) {\n      return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n  }, {\n    key: \"getEventTopic\",\n    value: function getEventTopic(eventFragment) {\n      return id(eventFragment.format());\n    }\n  }, {\n    key: \"isInterface\",\n    value: function isInterface(value) {\n      return !!(value && value._isInterface);\n    }\n  }]);\n\n  return Interface;\n}();","map":{"version":3,"sources":["../src.ts/interface.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexDataSlice, hexlify, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { id } from \"@ethersproject/hash\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { defineReadOnly, Description, getStatic } from \"@ethersproject/properties\";\nimport { defaultAbiCoder } from \"./abi-coder\";\nimport { checkResultErrors } from \"./coders/abstract-coder\";\nimport { ConstructorFragment, EventFragment, FormatTypes, Fragment, FunctionFragment, ParamType } from \"./fragments\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport { checkResultErrors };\nexport class LogDescription extends Description {\n}\nexport class TransactionDescription extends Description {\n}\nexport class Indexed extends Description {\n    static isIndexed(value) {\n        return !!(value && value._isIndexed);\n    }\n}\nfunction wrapAccessError(property, error) {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);\n    wrap.error = error;\n    return wrap;\n}\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\nexport class Interface {\n    constructor(fragments) {\n        logger.checkNew(new.target, Interface);\n        let abi = [];\n        if (typeof (fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        }\n        else {\n            abi = fragments;\n        }\n        defineReadOnly(this, \"fragments\", abi.map((fragment) => {\n            return Fragment.from(fragment);\n        }).filter((fragment) => (fragment != null)));\n        defineReadOnly(this, \"_abiCoder\", getStatic((new.target), \"getAbiCoder\")());\n        defineReadOnly(this, \"functions\", {});\n        defineReadOnly(this, \"errors\", {});\n        defineReadOnly(this, \"events\", {});\n        defineReadOnly(this, \"structs\", {});\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment) => {\n            let bucket = null;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        logger.warn(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineReadOnly(this, \"deploy\", fragment);\n                    return;\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.functions;\n                    break;\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.events;\n                    break;\n                default:\n                    return;\n            }\n            let signature = fragment.format();\n            if (bucket[signature]) {\n                logger.warn(\"duplicate definition - \" + signature);\n                return;\n            }\n            bucket[signature] = fragment;\n        });\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineReadOnly(this, \"deploy\", ConstructorFragment.from({\n                payable: false,\n                type: \"constructor\"\n            }));\n        }\n        defineReadOnly(this, \"_isInterface\", true);\n    }\n    format(format) {\n        if (!format) {\n            format = FormatTypes.full;\n        }\n        if (format === FormatTypes.sighash) {\n            logger.throwArgumentError(\"interface does not support formatting sighash\", \"format\", format);\n        }\n        const abi = this.fragments.map((fragment) => fragment.format(format));\n        // We need to re-bundle the JSON fragments a bit\n        if (format === FormatTypes.json) {\n            return JSON.stringify(abi.map((j) => JSON.parse(j)));\n        }\n        return abi;\n    }\n    // Sub-classes can override these to handle other blockchains\n    static getAbiCoder() {\n        return defaultAbiCoder;\n    }\n    static getAddress(address) {\n        return getAddress(address);\n    }\n    static getSighash(functionFragment) {\n        return hexDataSlice(id(functionFragment.format()), 0, 4);\n    }\n    static getEventTopic(eventFragment) {\n        return id(eventFragment.format());\n    }\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    getFunction(nameOrSignatureOrSighash) {\n        if (isHexString(nameOrSignatureOrSighash)) {\n            for (const name in this.functions) {\n                if (nameOrSignatureOrSighash === this.getSighash(name)) {\n                    return this.functions[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching function\", \"sighash\", nameOrSignatureOrSighash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrSighash.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrSighash.trim();\n            const matching = Object.keys(this.functions).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching function\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching functions\", \"name\", name);\n            }\n            return this.functions[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.functions[FunctionFragment.fromString(nameOrSignatureOrSighash).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching function\", \"signature\", nameOrSignatureOrSighash);\n        }\n        return result;\n    }\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    getEvent(nameOrSignatureOrTopic) {\n        if (isHexString(nameOrSignatureOrTopic)) {\n            const topichash = nameOrSignatureOrTopic.toLowerCase();\n            for (const name in this.events) {\n                if (topichash === this.getEventTopic(name)) {\n                    return this.events[name];\n                }\n            }\n            logger.throwArgumentError(\"no matching event\", \"topichash\", topichash);\n        }\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (nameOrSignatureOrTopic.indexOf(\"(\") === -1) {\n            const name = nameOrSignatureOrTopic.trim();\n            const matching = Object.keys(this.events).filter((f) => (f.split(\"(\" /* fix:) */)[0] === name));\n            if (matching.length === 0) {\n                logger.throwArgumentError(\"no matching event\", \"name\", name);\n            }\n            else if (matching.length > 1) {\n                logger.throwArgumentError(\"multiple matching events\", \"name\", name);\n            }\n            return this.events[matching[0]];\n        }\n        // Normlize the signature and lookup the function\n        const result = this.events[EventFragment.fromString(nameOrSignatureOrTopic).format()];\n        if (!result) {\n            logger.throwArgumentError(\"no matching event\", \"signature\", nameOrSignatureOrTopic);\n        }\n        return result;\n    }\n    // Get the sighash (the bytes4 selector) used by Solidity to identify a function\n    getSighash(functionFragment) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return getStatic(this.constructor, \"getSighash\")(functionFragment);\n    }\n    // Get the topic (the bytes32 hash) used by Solidity to identify an event\n    getEventTopic(eventFragment) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        return getStatic(this.constructor, \"getEventTopic\")(eventFragment);\n    }\n    _decodeParams(params, data) {\n        return this._abiCoder.decode(params, data);\n    }\n    _encodeParams(params, values) {\n        return this._abiCoder.encode(params, values);\n    }\n    encodeDeploy(values) {\n        return this._encodeParams(this.deploy.inputs, values || []);\n    }\n    // Decode the data for a function call (e.g. tx.data)\n    decodeFunctionData(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        const bytes = arrayify(data);\n        if (hexlify(bytes.slice(0, 4)) !== this.getSighash(functionFragment)) {\n            logger.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, \"data\", hexlify(bytes));\n        }\n        return this._decodeParams(functionFragment.inputs, bytes.slice(4));\n    }\n    // Encode the data for a function call (e.g. tx.data)\n    encodeFunctionData(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(concat([\n            this.getSighash(functionFragment),\n            this._encodeParams(functionFragment.inputs, values || [])\n        ]));\n    }\n    // Decode the result from a function call (e.g. from eth_call)\n    decodeFunctionResult(functionFragment, data) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        let bytes = arrayify(data);\n        let reason = null;\n        let errorSignature = null;\n        switch (bytes.length % this._abiCoder._getWordSize()) {\n            case 0:\n                try {\n                    return this._abiCoder.decode(functionFragment.outputs, bytes);\n                }\n                catch (error) { }\n                break;\n            case 4:\n                if (hexlify(bytes.slice(0, 4)) === \"0x08c379a0\") {\n                    errorSignature = \"Error(string)\";\n                    reason = this._abiCoder.decode([\"string\"], bytes.slice(4))[0];\n                }\n                break;\n        }\n        return logger.throwError(\"call revert exception\", Logger.errors.CALL_EXCEPTION, {\n            method: functionFragment.format(),\n            errorSignature: errorSignature,\n            errorArgs: [reason],\n            reason: reason\n        });\n    }\n    // Encode the result for a function call (e.g. for eth_call)\n    encodeFunctionResult(functionFragment, values) {\n        if (typeof (functionFragment) === \"string\") {\n            functionFragment = this.getFunction(functionFragment);\n        }\n        return hexlify(this._abiCoder.encode(functionFragment.outputs, values || []));\n    }\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (values.length > eventFragment.inputs.length) {\n            logger.throwError(\"too many arguments for \" + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {\n                argument: \"values\",\n                value: values\n            });\n        }\n        let topics = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        const encodeTopic = (param, value) => {\n            if (param.type === \"string\") {\n                return id(value);\n            }\n            else if (param.type === \"bytes\") {\n                return keccak256(hexlify(value));\n            }\n            // Check addresses are valid\n            if (param.type === \"address\") {\n                this._abiCoder.encode([\"address\"], [value]);\n            }\n            return hexZeroPad(hexlify(value), 32);\n        };\n        values.forEach((value, index) => {\n            let param = eventFragment.inputs[index];\n            if (!param.indexed) {\n                if (value != null) {\n                    logger.throwArgumentError(\"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                }\n                return;\n            }\n            if (value == null) {\n                topics.push(null);\n            }\n            else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            }\n            else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            }\n            else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n        return topics;\n    }\n    encodeEventLog(eventFragment, values) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        const topics = [];\n        const dataTypes = [];\n        const dataValues = [];\n        if (!eventFragment.anonymous) {\n            topics.push(this.getEventTopic(eventFragment));\n        }\n        if (values.length !== eventFragment.inputs.length) {\n            logger.throwArgumentError(\"event arguments/values mismatch\", \"values\", values);\n        }\n        eventFragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value));\n                }\n                else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value));\n                }\n                else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TOOD\n                    throw new Error(\"not implemented\");\n                }\n                else {\n                    topics.push(this._abiCoder.encode([param.type], [value]));\n                }\n            }\n            else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n        return {\n            data: this._abiCoder.encode(dataTypes, dataValues),\n            topics: topics\n        };\n    }\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(eventFragment, data, topics) {\n        if (typeof (eventFragment) === \"string\") {\n            eventFragment = this.getEvent(eventFragment);\n        }\n        if (topics != null && !eventFragment.anonymous) {\n            let topicHash = this.getEventTopic(eventFragment);\n            if (!isHexString(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {\n                logger.throwError(\"fragment/topic mismatch\", Logger.errors.INVALID_ARGUMENT, { argument: \"topics[0]\", expected: topicHash, value: topics[0] });\n            }\n            topics = topics.slice(1);\n        }\n        let indexed = [];\n        let nonIndexed = [];\n        let dynamic = [];\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.fromObject({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                }\n                else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            }\n            else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n        let resultIndexed = (topics != null) ? this._abiCoder.decode(indexed, concat(topics)) : null;\n        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);\n        let result = [];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        eventFragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: null });\n                }\n                else if (dynamic[index]) {\n                    result[index] = new Indexed({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });\n                }\n                else {\n                    try {\n                        result[index] = resultIndexed[indexedIndex++];\n                    }\n                    catch (error) {\n                        result[index] = error;\n                    }\n                }\n            }\n            else {\n                try {\n                    result[index] = resultNonIndexed[nonIndexedIndex++];\n                }\n                catch (error) {\n                    result[index] = error;\n                }\n            }\n            // Add the keyword argument if named and safe\n            if (param.name && result[param.name] == null) {\n                const value = result[index];\n                // Make error named values throw on access\n                if (value instanceof Error) {\n                    Object.defineProperty(result, param.name, {\n                        get: () => { throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value); }\n                    });\n                }\n                else {\n                    result[param.name] = value;\n                }\n            }\n        });\n        // Make all error indexed values throw on access\n        for (let i = 0; i < result.length; i++) {\n            const value = result[i];\n            if (value instanceof Error) {\n                Object.defineProperty(result, i, {\n                    get: () => { throw wrapAccessError(`index ${i}`, value); }\n                });\n            }\n        }\n        return Object.freeze(result);\n    }\n    // Given a transaction, find the matching function fragment (if any) and\n    // determine all its properties and call parameters\n    parseTransaction(tx) {\n        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());\n        if (!fragment) {\n            return null;\n        }\n        return new TransactionDescription({\n            args: this._abiCoder.decode(fragment.inputs, \"0x\" + tx.data.substring(10)),\n            functionFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            sighash: this.getSighash(fragment),\n            value: BigNumber.from(tx.value || \"0\"),\n        });\n    }\n    // Given an event log, find the matching event fragment (if any) and\n    // determine all its properties and values\n    parseLog(log) {\n        let fragment = this.getEvent(log.topics[0]);\n        if (!fragment || fragment.anonymous) {\n            return null;\n        }\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe jsut a fragment?\n        return new LogDescription({\n            eventFragment: fragment,\n            name: fragment.name,\n            signature: fragment.format(),\n            topic: this.getEventTopic(fragment),\n            args: this.decodeEventLog(fragment, log.data, log.topics)\n        });\n    }\n    /*\n    static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {\n        if (Interface.isInterface(value)) {\n            return value;\n        }\n        if (typeof(value) === \"string\") {\n            return new Interface(JSON.parse(value));\n        }\n        return new Interface(value);\n    }\n    */\n    static isInterface(value) {\n        return !!(value && value._isInterface);\n    }\n}\n//# sourceMappingURL=interface.js.map"]},"metadata":{},"sourceType":"module"}