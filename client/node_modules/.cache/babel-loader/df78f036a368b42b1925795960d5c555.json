{"ast":null,"code":"import _regeneratorRuntime from\"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useState}from'react';import useEth from\"../contexts/EthContext/useEth\";import Axios from'axios';import'../App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";require('dotenv').config();var serverUrl=\"http://localhost:3000\"+'/delivery/';var userAddress=null;var listeningToCompleteEvent=false;var ProclaimDelivery=function ProclaimDelivery(){var _useEth=useEth(),_useEth$state=_useEth.state,contract=_useEth$state.contract,accounts=_useEth$state.accounts;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),deliveryRequests=_useState2[0],setDeliveryRequests=_useState2[1];if(accounts!=null){userAddress=accounts[0];}if(userAddress!=null){Axios.get(serverUrl+'deliveryMan/'+userAddress).then(function(response){setDeliveryRequests(response.data);});}var handleComplete=function handleComplete(log){var requestId=log.returnValues.requestId;var tempRequests=deliveryRequests;tempRequests.forEach(function(request,index){if(request._id==requestId){alert(\"The Delivery has been confirmed. The reward has been transferred to your account.\");}});};// starting listener for Confirmation Event.\nif(contract!=null&&!listeningToCompleteEvent){window.completeEvent=contract.events.CompleteEvent().on(\"data\",function(log){handleComplete(log);});listeningToCompleteEvent=true;}var proclaimDelivery=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(index){var hash;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:hash=deliveryRequests[index]._id;if(!(hash==='')){_context.next=4;break;}alert('There was some problem. Please try again.');return _context.abrupt(\"return\");case 4:_context.prev=4;_context.next=7;return contract.methods.allegeDelivery(hash).send({from:accounts[0]}).then(function(response){console.log(response);alert(\"Waiting for confirmation from customer. Money will be transferred to your account after confirmation.\");});case 7:_context.next=12;break;case 9:_context.prev=9;_context.t0=_context[\"catch\"](4);alert(_context.t0);case 12:case\"end\":return _context.stop();}}},_callee,null,[[4,9]]);}));return function proclaimDelivery(_x){return _ref.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{id:\"wrapper\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Proclaim your delivery\"}),/*#__PURE__*/_jsxs(\"table\",{id:\"deliveries\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Index\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Item\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Pickup From\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Deliver To\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Reward\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Accept Delivery\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:deliveryRequests!=null?deliveryRequests.map(function(req,index){return/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{children:index+1}),/*#__PURE__*/_jsx(\"td\",{children:req.item}),/*#__PURE__*/_jsx(\"td\",{children:req.from}),/*#__PURE__*/_jsx(\"td\",{children:req.to}),/*#__PURE__*/_jsx(\"td\",{children:req.payment}),/*#__PURE__*/_jsx(\"td\",{children:/*#__PURE__*/_jsx(\"button\",{onClick:function onClick(){return proclaimDelivery(index);},children:\"Proclaim\"})})]});}):console.log(\"deliveryRequests was null.\")})]}),deliveryRequests!=null?deliveryRequests.length==0?\"No delivery requests yet.\":null:null]});};export default ProclaimDelivery;","map":{"version":3,"names":["React","useState","useEth","Axios","require","config","serverUrl","userAddress","listeningToCompleteEvent","ProclaimDelivery","state","contract","accounts","deliveryRequests","setDeliveryRequests","get","then","response","data","handleComplete","log","requestId","returnValues","tempRequests","forEach","request","index","_id","alert","window","completeEvent","events","CompleteEvent","on","proclaimDelivery","hash","methods","allegeDelivery","send","from","console","map","req","item","to","payment","length"],"sources":["D:/Kapil D/Personal/DecentralizedDeliveries/client/src/components/ProclaimDelivery.jsx"],"sourcesContent":["import React, {useState} from 'react'\r\nimport useEth from \"../contexts/EthContext/useEth\";\r\nimport Axios from 'axios'\r\nimport '../App.css'\r\nrequire('dotenv').config()\r\n\r\n\r\nconst serverUrl = \"http://localhost:3000\" + '/delivery/'\r\nlet userAddress = null;\r\nlet listeningToCompleteEvent = false;\r\n\r\nconst ProclaimDelivery = () => {\r\n  \r\n    const { state: { contract, accounts } } = useEth();\r\n    const [deliveryRequests, setDeliveryRequests] = useState([])\r\n    if(accounts != null) {\r\n      userAddress = accounts[0]\r\n    }\r\n\r\n    if(userAddress != null) {\r\n      Axios.get(serverUrl+'deliveryMan/' + userAddress).then(response => {\r\n        setDeliveryRequests(response.data)\r\n      })\r\n    }\r\n\r\n    const handleComplete = (log) => {\r\n      let requestId = log.returnValues.requestId\r\n      let tempRequests = deliveryRequests\r\n      tempRequests.forEach((request, index) => {\r\n        if (request._id == requestId) {\r\n          alert(\"The Delivery has been confirmed. The reward has been transferred to your account.\")\r\n        }\r\n      }) \r\n    }\r\n\r\n    // starting listener for Confirmation Event.\r\n    if (contract != null && !listeningToCompleteEvent) {\r\n      window.completeEvent = contract.events.CompleteEvent()\r\n      .on(\"data\", function(log) {\r\n        handleComplete(log);\r\n      })\r\n      listeningToCompleteEvent = true;\r\n    }\r\n\r\n    const proclaimDelivery = async (index) => {\r\n      const hash = deliveryRequests[index]._id\r\n      if(hash === '') {\r\n        alert('There was some problem. Please try again.');\r\n        return;\r\n      }\r\n      try {\r\n        await contract.methods.allegeDelivery(hash).send({from: accounts[0]}).then((response) => {\r\n          console.log(response)\r\n          alert(\"Waiting for confirmation from customer. Money will be transferred to your account after confirmation.\")\r\n        })\r\n      } catch(err) {\r\n        alert(err)\r\n      }\r\n    }\r\n\r\n  return (\r\n    <div id='wrapper'>\r\n        <h2>Proclaim your delivery</h2>\r\n        <table id='deliveries'>\r\n          <thead>\r\n            <tr>\r\n              <th>Index</th>\r\n              <th>Item</th>\r\n              <th>Pickup From</th>\r\n              <th>Deliver To</th>\r\n              <th>Reward</th>\r\n              <th>Accept Delivery</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {deliveryRequests != null ? deliveryRequests.map((req, index) =>  {\r\n            return (\r\n              <tr>\r\n                <td>{index+1}</td>\r\n                <td>{req.item}</td>\r\n                <td>{req.from}</td>\r\n                <td>{req.to}</td>\r\n                <td>{req.payment}</td>\r\n                <td><button onClick={() => proclaimDelivery(index)}>Proclaim</button></td>\r\n              </tr>\r\n            )\r\n          }): console.log(\"deliveryRequests was null.\")}\r\n          </tbody>\r\n        </table>\r\n        {deliveryRequests != null ? deliveryRequests.length == 0 ? \"No delivery requests yet.\" : null : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProclaimDelivery"],"mappings":"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"},"metadata":{},"sourceType":"module"}