{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Kapil D/Personal/DecentralizedDeliveries/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { Coder } from \"./abstract-coder\"; // Clones the functionality of an existing Coder, but without a localName\n\nexport var AnonymousCoder = /*#__PURE__*/function (_Coder) {\n  _inherits(AnonymousCoder, _Coder);\n\n  var _super = _createSuper(AnonymousCoder);\n\n  function AnonymousCoder(coder) {\n    var _this;\n\n    _classCallCheck(this, AnonymousCoder);\n\n    _this = _super.call(this, coder.name, coder.type, undefined, coder.dynamic);\n    _this.coder = coder;\n    return _this;\n  }\n\n  _createClass(AnonymousCoder, [{\n    key: \"encode\",\n    value: function encode(writer, value) {\n      return this.coder.encode(writer, value);\n    }\n  }, {\n    key: \"decode\",\n    value: function decode(reader) {\n      return this.coder.decode(reader);\n    }\n  }]);\n\n  return AnonymousCoder;\n}(Coder);","map":{"version":3,"sources":["../../src.ts/coders/anonymous.ts"],"names":[],"mappings":"AAAA;;;;;;AAEA,SAAS,KAAT,QAAsC,kBAAtC,C,CAEA;;AACA,WAAa,cAAb;EAAA;;EAAA;;EAGI,wBAAY,KAAZ,EAAwB;IAAA;;IAAA;;IACpB,0BAAM,KAAK,CAAC,IAAZ,EAAkB,KAAK,CAAC,IAAxB,EAA8B,SAA9B,EAAyC,KAAK,CAAC,OAA/C;IACA,MAAK,KAAL,GAAa,KAAb;IAFoB;EAGvB;;EANL;IAAA;IAAA,OAQI,gBAAO,MAAP,EAAuB,KAAvB,EAAiC;MAC7B,OAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,MAAlB,EAA0B,KAA1B,CAAP;IACH;EAVL;IAAA;IAAA,OAYI,gBAAO,MAAP,EAAqB;MACjB,OAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,MAAlB,CAAP;IACH;EAdL;;EAAA;AAAA,EAAoC,KAApC","sourceRoot":"","sourcesContent":["\"use strict\";\nimport { Coder } from \"./abstract-coder\";\n// Clones the functionality of an existing Coder, but without a localName\nexport class AnonymousCoder extends Coder {\n    constructor(coder) {\n        super(coder.name, coder.type, undefined, coder.dynamic);\n        this.coder = coder;\n    }\n    encode(writer, value) {\n        return this.coder.encode(writer, value);\n    }\n    decode(reader) {\n        return this.coder.decode(reader);\n    }\n}\n//# sourceMappingURL=anonymous.js.map"]},"metadata":{},"sourceType":"module"}