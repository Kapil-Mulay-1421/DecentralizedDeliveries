{"ast":null,"code":"var _jsxFileName = \"D:\\\\Kapil D\\\\Personal\\\\DecentralizedDeliveries\\\\client\\\\src\\\\contexts\\\\EthContext\\\\EthProvider.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EthProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const init = useCallback(async artifact => {\n    if (artifact) {\n      const {\n        ethereum\n      } = window;\n\n      if (!ethereum) {\n        alert(\"Make sure you have metamask!\");\n        return;\n      }\n\n      const web3 = new Web3(Web3.givenProvider || \"ws://localhost:7545\");\n      const accounts = await web3.eth.requestAccounts();\n      const networkID = await web3.eth.net.getId();\n\n      if (networkID != 80001) {\n        alert(\"You are not connected to the Mumbai Test Network.\");\n      }\n\n      const {\n        abi\n      } = artifact;\n      let address, contract;\n\n      try {\n        address = artifact.networks[networkID].address;\n        contract = new web3.eth.Contract(abi, address);\n      } catch (err) {\n        console.error(err);\n      }\n\n      dispatch({\n        type: actions.init,\n        data: {\n          artifact,\n          web3,\n          accounts,\n          networkID,\n          contract\n        }\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/DeliveryHandler.json\");\n\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n  return /*#__PURE__*/_jsxDEV(EthContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EthProvider, \"hc888FM+IczqCNE4rWyvjI+TMdU=\");\n\n_c = EthProvider;\nexport default EthProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"EthProvider\");","map":{"version":3,"names":["React","useReducer","useCallback","useEffect","Web3","EthContext","reducer","actions","initialState","EthProvider","children","state","dispatch","init","artifact","ethereum","window","alert","web3","givenProvider","accounts","eth","requestAccounts","networkID","net","getId","abi","address","contract","networks","Contract","err","console","error","type","data","tryInit","require","events","handleChange","forEach","e","on","removeListener"],"sources":["D:/Kapil D/Personal/DecentralizedDeliveries/client/src/contexts/EthContext/EthProvider.jsx"],"sourcesContent":["import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const { ethereum } = window;\n        if (!ethereum) {\n          alert(\"Make sure you have metamask!\");\n          return;\n        }\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:7545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        if (networkID != 80001) {\n          alert(\"You are not connected to the Mumbai Test Network.\")\n        }\n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n        } catch (err) {\n          console.error(err);\n        }\n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract }\n        });\n      }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/DeliveryHandler.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}