[{"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\index.js":"1","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\App.jsx":"2","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\Footer.jsx":"3","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\index.js":"4","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\useEth.js":"5","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\EthContext.js":"6","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\state.js":"7","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\EthProvider.jsx":"8","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\RequestDelivery.jsx":"9","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\AcceptDelivery.jsx":"10","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\ProclaimDelivery.jsx":"11"},{"size":254,"mtime":1656324156974,"results":"12","hashOfConfig":"13"},{"size":1704,"mtime":1660811841303,"results":"14","hashOfConfig":"13"},{"size":473,"mtime":1655358856000,"results":"15","hashOfConfig":"16"},{"size":181,"mtime":1655358856000,"results":"17","hashOfConfig":"13"},{"size":145,"mtime":1655358856000,"results":"18","hashOfConfig":"13"},{"size":104,"mtime":1655358856000,"results":"19","hashOfConfig":"13"},{"size":424,"mtime":1655358856000,"results":"20","hashOfConfig":"13"},{"size":1835,"mtime":1660812767532,"results":"21","hashOfConfig":"13"},{"size":7646,"mtime":1660642578541,"results":"22","hashOfConfig":"13"},{"size":2257,"mtime":1660642310474,"results":"23","hashOfConfig":"13"},{"size":3058,"mtime":1660642347400,"results":"24","hashOfConfig":"13"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1u5rh6b",{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10lmr2g",{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\index.js",[],"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\App.jsx",["51"],"import { EthProvider } from \"./contexts/EthContext\";\nimport \"./App.css\";\nimport AcceptDelivery from \"./components/AcceptDelivery\";\nimport RequestDelivery from \"./components/RequestDelivery\";\nimport ProclaimDelivery from \"./components/ProclaimDelivery\";\nimport {useState} from \"react\";\nrequire('dotenv').config()\n\n\nfunction App() {\n  const domain = \"http://localhost:3000\"\n  let location  = window.location.href\n  const [request, changeRequest] = useState(location.slice(domain.length, location.length).toLowerCase())\n  const [mining, setMining] = useState(false)\n\n  function getComponent(request) {\n    if (request === '/') {\n      changeRequest(\"/#/\")\n    }\n    if (request === '/#/') {\n      return <RequestDelivery setMining={setMining} />\n    }\n    if (request === '/#/acceptdelivery') {\n      return <AcceptDelivery setMining={setMining} />\n    }\n    if (request === '/#/proclaimdelivery') {\n      return <ProclaimDelivery setMining={setMining} />\n    }\n  }\n\n  return (\n      <EthProvider>\n      <div id=\"App\" style={{position: \"relative\"}}>\n        <div id=\"shadowLayer\" className={mining?\"is-visible\":\"\"}></div>\n        <div className=\"topnav\" style={{position: \"absolute\", zIndex: \"2\", width: \"100%\"}}>\n          <a href=\"/#/\" onClick={() => changeRequest(\"/#/\")}>Home</a>\n          <a href=\"/#/acceptdelivery\" onClick={() => changeRequest(\"/#/acceptdelivery\")}>Accept Delivery</a>\n          <a href=\"/#/proclaimdelivery\" onClick={() => changeRequest(\"/#/proclaimdelivery\")}>Proclaims</a>\n          <a href=\"\">About</a>\n        </div>\n          <div className=\"container\">\n                {getComponent(request)}\n          </div>\n        </div>\n      </EthProvider>\n  );\n}\n\n\n\nexport default App;\n","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\Footer.jsx",[],"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\index.js",[],"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\useEth.js",[],"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\EthContext.js",[],"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\state.js",[],"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\contexts\\EthContext\\EthProvider.jsx",["52"],"D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\RequestDelivery.jsx",["53","54","55","56","57","58","59","60","61"],"import React, {useState, useEffect} from 'react'\r\nimport useEth from \"../contexts/EthContext/useEth\";\r\nimport Axios from 'axios'\r\nimport \"../App.css\"\r\nrequire('dotenv').config()\r\n\r\n\r\nconst serverUrl = \"http://localhost:3000\" + '/deliveries/'\r\nlet userAddress = null;\r\n\r\nlet listeningToAllegeEvent = false;\r\nlet listeningToAcceptEvent = false;\r\n\r\nconst RequestDelivery = ({ setMining }) => {\r\n  const { state: { contract, accounts } } = useEth();\r\n  const [requests, setRequests] = useState([])\r\n\r\n  function setCookie(cname, cvalue, exdays) {\r\n    const d = new Date();\r\n    d.setTime(d.getTime() + (exdays*24*60*60*1000));\r\n    let expires = \"expires=\"+ d.toUTCString();\r\n    document.cookie = cname + \"=\" + cvalue + \";\" + expires + \";path=/\";\r\n  }\r\n\r\n  function getCookie(cname) {\r\n    let name = cname + \"=\";\r\n    let decodedCookie = decodeURIComponent(document.cookie);\r\n    let ca = decodedCookie.split(';');\r\n    for(let i = 0; i <ca.length; i++) {\r\n      let c = ca[i];\r\n      while (c.charAt(0) == ' ') {\r\n        c = c.substring(1);\r\n      }\r\n      if (c.indexOf(name) == 0) {\r\n        return c.substring(name.length, c.length);\r\n      }\r\n    }\r\n    return \"\";\r\n  }\r\n\r\n  useEffect(() => {\r\n    if(accounts != null) {\r\n      userAddress = accounts[0]\r\n    }\r\n    if(userAddress != null) {\r\n      Axios.get(serverUrl+'address/' + userAddress).then(response => {\r\n        setRequests(response.data)\r\n        setCookie(\"requests\", JSON.stringify(response.data), 7)\r\n      })\r\n    }\r\n  }, [contract])\r\n\r\n  function getRequests() {\r\n    Axios.get(serverUrl+'address/' + userAddress).then(response => {\r\n      setRequests(response.data)\r\n      setCookie(\"requests\", JSON.stringify(response.data), 7)\r\n    })\r\n  }\r\n\r\n\r\n  const [to, setTo] = useState(null)\r\n  const [from, setFrom] = useState(null)\r\n  const [item, setItem] = useState(null)\r\n  const [value, setValue] = useState(0)\r\n  window.allegeEvent = null;\r\n\r\n\r\n  // starting listener for Accept Event.\r\n  if (contract != null && !listeningToAcceptEvent) {\r\n    window.acceptEvent = contract.events.AcceptEvent()\r\n    .on(\"data\", function(log) {\r\n      handleAccept(log);\r\n    })\r\n    listeningToAcceptEvent = true;\r\n  }\r\n\r\n  // starting listener for Allege Event.\r\n  if (contract != null && !listeningToAllegeEvent) {\r\n    window.allegeEvent = contract.events.AllegeEvent()\r\n    .on(\"data\", function(log) {\r\n      handleAllege(log);\r\n    })\r\n    listeningToAllegeEvent = true;\r\n  }\r\n\r\n  const handleInput = e => {\r\n    switch(e.target.name) {\r\n        case 'to': \r\n            setTo(e.target.value);\r\n            break;\r\n        case 'from':\r\n            setFrom(e.target.value);\r\n            break;\r\n        case 'item': \r\n            setItem(e.target.value);\r\n            break;\r\n        case 'value': \r\n            setValue(e.target.value);\r\n            break;\r\n        default: \r\n            alert('Invalid input source.')\r\n            break;\r\n    }\r\n  }\r\n\r\n  const handleSubmit = async () => {\r\n    // Validation: \r\n    if (to === null || from === null || item === null || value === 0) {\r\n        alert(\"Please fill in all the values.\")\r\n        return;\r\n    }\r\n\r\n    // Calling Contract if validation succeeds: \r\n    // Showing shadowLayer:\r\n    setMining(true)\r\n    try {\r\n      await contract.methods.requestDelivery(to, from, item).send({from: accounts[0], value: value}).then((response) => {\r\n        getRequests()\r\n        console.log(response)\r\n      })\r\n    } catch(err) {\r\n      console.log(err)\r\n    }\r\n    setMining(false)\r\n  }\r\n\r\n  window.handleConfirm = async (index) => {\r\n    let requestId = requests[index]._id\r\n    setMining(true)\r\n    try {\r\n      await contract.methods.confirm(requestId).send({from: accounts[0]}).then((response) => {\r\n        getRequests()\r\n        console.log(response)\r\n      })\r\n    } catch(err) {\r\n      console.log(err)\r\n    }\r\n    setMining(false)\r\n  }\r\n\r\n  const handleAccept = (log) => {\r\n    let requestId = log.returnValues.requestId\r\n    let tempRequests = JSON.parse(getCookie(\"requests\"))\r\n    tempRequests.forEach((request, index) => {\r\n      if (request._id == requestId) {\r\n        tempRequests[index].status = 1\r\n        tempRequests[index].deliveryMan = log.returnValues.deliveryMan\r\n        setRequests(tempRequests)\r\n        return;\r\n      }\r\n    }) \r\n  }\r\n\r\n  const handleAllege = (log) => {\r\n    let requestId = log.returnValues.requestId\r\n    let tempRequests = JSON.parse(getCookie(\"requests\"))\r\n    tempRequests.forEach((request, index) => {\r\n      if (request._id == requestId) {\r\n        tempRequests[index].status = 2\r\n        setRequests(tempRequests)\r\n        return;\r\n      }\r\n    }) \r\n  }\r\n\r\n  return (\r\n    <div style={{display: \"flex\", justifyContent: \"space-between\", height: \"100vh\", width: \"100vw\"}}>\r\n    <div id='wrapper' style={{padding: \"50px\", height: \"100vh\", width: \"50vw\", overflow: \"auto\"}}>\r\n      <h1>Welcome to Decentralized Deliveries</h1>\r\n      <div className='align-center'>\r\n        <h2 style={{marginTop: \"50px\"}}>Request a Delivery</h2>\r\n        <div id='form-input-wrapper'>\r\n\r\n          <div className='group'>\r\n            <input type=\"text\" name='item' onChange={handleInput} required />\r\n            <span className=\"highlight\"></span>\r\n            <span className=\"bar\"></span>\r\n            <label htmlFor=\"item\">Pick this up: </label>\r\n          </div>\r\n\r\n          <div className='group'>\r\n            <input type=\"text\" name='to' onChange={handleInput} required />\r\n            <span className=\"highlight\"></span>\r\n            <span className=\"bar\"></span>\r\n            <label htmlFor=\"to\">Delivery Destination: </label>\r\n          </div>\r\n      \r\n          <div className='group'>\r\n            <input type=\"text\" name='from' onChange={handleInput} required />\r\n            <span className=\"highlight\"></span>\r\n            <span className=\"bar\"></span>\r\n            <label htmlFor=\"from\">Pickup From: </label>\r\n          </div>\r\n    \r\n          <div className='group'>\r\n            <input type=\"number\" name='value' onChange={handleInput} required />\r\n            <span className=\"highlight\"></span>\r\n            <span className=\"bar\"></span>\r\n            <label htmlFor=\"value\">Attach payment(in wei): </label>\r\n          </div>\r\n\r\n        </div>\r\n        <button style={{marginTop: \"30px\"}} onClick={handleSubmit}>Submit</button>\r\n      </div>\r\n\r\n      <div className='align-center'>\r\n        <h2>Your Orders</h2>\r\n        <table id='deliveries'>\r\n          <thead>\r\n            <tr>\r\n              <th>Index</th>\r\n              <th>Item</th>\r\n              <th>From</th>\r\n              <th>To</th>\r\n              <th>Status</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {requests != null ? requests.map((request, index) => {\r\n              console.log(request.status)\r\n              return (\r\n                <tr>\r\n                  <td>{index+1}</td>\r\n                  <td>{request.item}</td>\r\n                  <td>{request.from}</td>\r\n                  <td>{request.to}</td>\r\n                  <td>{request.status == \"0\" ? \"Requested\" : request.status == '1' ? \"on the way\" : request.status == '2' ? <button onClick={() => window.handleConfirm(index)}>Confirm</button> : \"Completed.\"}</td>\r\n              </tr>\r\n              )\r\n            }): \"You have not requestsed anything yet.\"}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <div  style={{height: \"100vh\", width: \"50vw\", overflow: \"hidden\"}}>\r\n      <img src=\"https://content.jdmagicbox.com/comp/def_content/transporters/default-transporters-12.jpg\" alt=\"\" style={{height: \"100%\", width: \"auto\"}} />\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default RequestDelivery","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\AcceptDelivery.jsx",["62","63","64"],"import React, {useRef, useState} from 'react'\r\nimport useEth from \"../contexts/EthContext/useEth\";\r\nimport Axios from 'axios'\r\nimport '../App.css'\r\nrequire('dotenv').config()\r\n\r\n\r\nconst serverUrl = \"http://localhost:3000\" + '/deliveries/'\r\nlet userAddress = null;\r\n\r\nconst AcceptDelivery = ({ setMining }) => {\r\n  \r\n    const { state: { contract, accounts } } = useEth()\r\n    const [deliveryRequests, setDeliveryRequests] = useState([])\r\n    if(accounts != null) {\r\n      userAddress = accounts[0]\r\n    }\r\n\r\n    if(userAddress != null) {\r\n      Axios.get(serverUrl+'stage/0').then(response => {\r\n        setDeliveryRequests(response.data)\r\n      })\r\n    }\r\n\r\n    const acceptDelivery = async (index) => {\r\n      const hash = deliveryRequests[index]._id\r\n      if(hash === '') {\r\n        alert('There was a problem, please try again.');\r\n        return;\r\n      }\r\n      // showing shadowLayer\r\n      setMining(true)\r\n      try {\r\n        await contract.methods.acceptDelivery(hash).send({from: accounts[0]}).then((response) => {\r\n          console.log(response)\r\n          alert(\"Accepted request. Head over to the Proclaims page once you make the delivery.\")\r\n        })\r\n      } catch(err) {\r\n        alert(err)\r\n      }\r\n      setMining(false)\r\n    }\r\n\r\n  return (\r\n    <div id='wrapper'>\r\n        <h2>Make a Delivery</h2>\r\n        <table id='deliveries'>\r\n          <tr>\r\n            <th>Index</th>\r\n            <th>Item</th>\r\n            <th>Pickup From</th>\r\n            <th>Deliver To</th>\r\n            <th>Reward(in wei)</th>\r\n            <th>Accept Delivery</th>\r\n          </tr>\r\n          {deliveryRequests != null ? deliveryRequests.map((req, index) =>  {\r\n            return (\r\n              <tr>\r\n                <td>{index+1}</td>\r\n                <td>{req.item}</td>\r\n                <td>{req.from}</td>\r\n                <td>{req.to}</td>\r\n                <td>{req.payment}</td>\r\n                <td><button onClick={() => acceptDelivery(index)}>Accept</button></td>\r\n              </tr>\r\n            )\r\n          }): console.log(\"deliveryRequests was null.\")}\r\n        </table>\r\n        {deliveryRequests != null ? deliveryRequests.length == 0 ? \"No delivery requests yet.\" : null : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AcceptDelivery","D:\\Kapil D\\Personal\\DecentralizedDeliveries\\client\\src\\components\\ProclaimDelivery.jsx",["65","66","67"],"import React, {useState} from 'react'\r\nimport useEth from \"../contexts/EthContext/useEth\";\r\nimport Axios from 'axios'\r\nimport '../App.css'\r\nrequire('dotenv').config()\r\n\r\n\r\nconst serverUrl = \"http://localhost:3000\" + '/deliveries/'\r\nlet userAddress = null;\r\nlet listeningToCompleteEvent = false;\r\n\r\nconst ProclaimDelivery = ({ setMining }) => {\r\n  \r\n    const { state: { contract, accounts } } = useEth();\r\n    const [deliveryRequests, setDeliveryRequests] = useState([])\r\n    if(accounts != null) {\r\n      userAddress = accounts[0]\r\n    }\r\n\r\n    if(userAddress != null) {\r\n      Axios.get(serverUrl+'deliveryMan/' + userAddress).then(response => {\r\n        setDeliveryRequests(response.data)\r\n      })\r\n    }\r\n\r\n    const handleComplete = (log) => {\r\n      let requestId = log.returnValues.requestId\r\n      let tempRequests = deliveryRequests\r\n      tempRequests.forEach((request, index) => {\r\n        if (request._id == requestId) {\r\n          alert(\"The Delivery has been confirmed. The reward has been transferred to your account.\")\r\n        }\r\n      }) \r\n    }\r\n\r\n    // starting listener for Confirmation Event.\r\n    if (contract != null && !listeningToCompleteEvent) {\r\n      window.completeEvent = contract.events.CompleteEvent()\r\n      .on(\"data\", function(log) {\r\n        handleComplete(log);\r\n      })\r\n      listeningToCompleteEvent = true;\r\n    }\r\n\r\n    const proclaimDelivery = async (index) => {\r\n      const hash = deliveryRequests[index]._id\r\n      if(hash === '') {\r\n        alert('There was some problem. Please try again.');\r\n        return;\r\n      }\r\n      setMining(true)\r\n      try {\r\n        await contract.methods.allegeDelivery(hash).send({from: accounts[0]}).then((response) => {\r\n          console.log(response)\r\n          alert(\"Waiting for confirmation from customer. Money will be transferred to your account after confirmation.\")\r\n        })\r\n      } catch(err) {\r\n        alert(err)\r\n      }\r\n      setMining(false)\r\n    }\r\n\r\n  return (\r\n    <div id='wrapper'>\r\n        <h2>Proclaim your delivery</h2>\r\n        <table id='deliveries'>\r\n          <thead>\r\n            <tr>\r\n              <th>Index</th>\r\n              <th>Item</th>\r\n              <th>Pickup From</th>\r\n              <th>Deliver To</th>\r\n              <th>Reward</th>\r\n              <th>Accept Delivery</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n          {deliveryRequests != null ? deliveryRequests.map((req, index) =>  {\r\n            return (\r\n              <tr>\r\n                <td>{index+1}</td>\r\n                <td>{req.item}</td>\r\n                <td>{req.from}</td>\r\n                <td>{req.to}</td>\r\n                <td>{req.payment}</td>\r\n                <td><button onClick={() => proclaimDelivery(index)}>Proclaim</button></td>\r\n              </tr>\r\n            )\r\n          }): console.log(\"deliveryRequests was null.\")}\r\n          </tbody>\r\n        </table>\r\n        {deliveryRequests != null ? deliveryRequests.length == 0 ? \"No delivery requests yet.\" : null : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProclaimDelivery",{"ruleId":"68","severity":1,"message":"69","line":39,"column":11,"nodeType":"70","endLine":39,"endColumn":22},{"ruleId":"71","severity":1,"message":"72","line":15,"column":23,"nodeType":"73","messageId":"74","endLine":15,"endColumn":25},{"ruleId":"75","severity":1,"message":"76","line":8,"column":43,"nodeType":"73","messageId":"77","endLine":8,"endColumn":44},{"ruleId":"71","severity":1,"message":"78","line":31,"column":26,"nodeType":"73","messageId":"74","endLine":31,"endColumn":28},{"ruleId":"71","severity":1,"message":"78","line":34,"column":27,"nodeType":"73","messageId":"74","endLine":34,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":51,"column":6,"nodeType":"81","endLine":51,"endColumn":16,"suggestions":"82"},{"ruleId":"71","severity":1,"message":"78","line":145,"column":23,"nodeType":"73","messageId":"74","endLine":145,"endColumn":25},{"ruleId":"71","severity":1,"message":"78","line":158,"column":23,"nodeType":"73","messageId":"74","endLine":158,"endColumn":25},{"ruleId":"71","severity":1,"message":"78","line":227,"column":39,"nodeType":"73","messageId":"74","endLine":227,"endColumn":41},{"ruleId":"71","severity":1,"message":"78","line":227,"column":77,"nodeType":"73","messageId":"74","endLine":227,"endColumn":79},{"ruleId":"71","severity":1,"message":"78","line":227,"column":116,"nodeType":"73","messageId":"74","endLine":227,"endColumn":118},{"ruleId":"83","severity":1,"message":"84","line":1,"column":16,"nodeType":"85","messageId":"86","endLine":1,"endColumn":22},{"ruleId":"75","severity":1,"message":"76","line":8,"column":43,"nodeType":"73","messageId":"77","endLine":8,"endColumn":44},{"ruleId":"71","severity":1,"message":"78","line":69,"column":61,"nodeType":"73","messageId":"74","endLine":69,"endColumn":63},{"ruleId":"75","severity":1,"message":"76","line":8,"column":43,"nodeType":"73","messageId":"77","endLine":8,"endColumn":44},{"ruleId":"71","severity":1,"message":"78","line":30,"column":25,"nodeType":"73","messageId":"74","endLine":30,"endColumn":27},{"ruleId":"71","severity":1,"message":"78","line":92,"column":61,"nodeType":"73","messageId":"74","endLine":92,"endColumn":63},"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'accounts'. Either include it or remove the dependency array.","ArrayExpression",["87"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar",{"desc":"88","fix":"89"},"Update the dependencies array to be: [accounts, contract]",{"range":"90","text":"91"},[1493,1503],"[accounts, contract]"]